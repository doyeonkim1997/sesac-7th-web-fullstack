/**
 * 자료구조
 * 
 *  자료구조란?
 * - 데이터를 저장하고 관리하는 방법
 * - 데이터를 효율적으로 저장하고, 검색, 삽입, 삭제 등의 작업을 수행할 수 있도록 하는 구조
 * - 상황에 맞는 데이터 저장 구조를 고르는 것이 자료구조의 핵심
 * 
 * 1. 단순 구조 (Primitive Structure)
 * 
 * 정수, 실수, 문자, 문자열
 * - 정수 : 1, 2, 3, ...같은 숫자
 * - 실수 : 3.14, -0.3 같은 소수점이 있는 숫자
 * - 문자 : 'a', '김씨' 같은 단일 문자
 * - 문자열 : "HELLO", "안녕하세요" 같은 문자들의 모음
 * 
 * let num = 10;       // 정수
 * let pi = 3.14;      // 실수
 * let ch = 'A';       // 문자
 * let str = "Hello";  // 문자열
 *
 *
 * 2. 선형 구조 (Linear Structure)
 *
 * 리스트
 * 데이터를 순서대로 저장, 필요하면 인덱스로 접근
 * 
 * let fruits = ["apple", "banana", "cherry"];
 * console.log(fruits[1]); // "banana"
 *
 * 
 * 스택(Stack)
 *
 * LIFO(Last In, First Out): 마지막에 넣은 게 먼저 나옴.
 *
 * let stack = [];
 * stack.push(1); // 넣기
 * stack.push(2);
 * stack.pop();   // 마지막 값(2) 제거
 * console.log(stack); // [1]

 * - 스택은 후입선출(LIFO) 구조로, 가장 나중에 들어온 데이터가 가장 먼저 나감
 * - 스택에 모든 메모리가 채워져 있는 상태에서 자료를 삽입하려고 하면 Overflow가 발생
 * - 스택이 비어있는 상태에서 자료를 삭제하려고 하면 Underflow가 발생
 * 
 * 활용 사례
 * - 웹 브라우저 방문기록 뒤로가기
 * - 프로그램의 실행 취소 (Undo) 기능
 * - 인터럽트가 발생하여 복귀주소 저장 시
 * - 후위 표기법으로 수식을 표현
 * - 함수 호출 시 스택 프레임 관리
 * - 깊이 우선 탐색(DFS) 알고리즘에서 경로 추적
 *
 * 
 * 큐 (Queue)
 * - 큐는 선입선출(FIFO) 구조로, 가장 먼저 들어온 데이터가 가장 먼저 나감
 * - 프런트 포인터 : 가장 먼저 입력된 데이터의 기억공간을 가리키며, 삭제 작업을 할 때 사용
 * - 리어 포인터 : 가장 나중에 입력된 데이터의 기억공간을 가리키며, 삽입 작업을 할 때 사용
 * 
 * 활용 사례
 * - 우선순위가 같은 작업 예약 (예: 프린터 인쇄)
 * - 은행 창구 업무의 서비스 순서 대기 처리
 * - 콜센터 고객 대기시간
 * - 운영 체제의 작업 스케줄링
 * - 너비 우선 탐색(BFS) 구현
 * 
 * 
 * 덱 (Deque)
 * - 앞 뒤로 넣고 뺄 수 있는 자료구조
 * - 스택 + 큐 합친 느낌 (자주 사용 안 함)
 * 
 * 
 * 3. 비선형 구조
 * 
 * 
 * 트리 (Tree)
 * - 계층적 구조 (폴더와 비슷)
 * - 루트 -> 가지 -> 리프 
 * 
 * <html>
 *  <body>
 *    <div>
 *      <p>Hello</p>
 *    </div>
 *  </body>
 * </html>
 * -> 이런 식으로 트리 형태
 * 
 * 
 * 그래프 (Graph)
 * - 여러 노드(정점)가 서로 연결된 구조
 * 
 * 활용 사례
 * - 지도 길찾기
 * - 친구 추천 시스템
 * - 도로 교통 흐름 분석
 * 
 * 
 * 
 * 4. 파일구조
 * 
 * 순차 파일
 * - 순서대로 저장
 * - 한 줄씩 차례대로 읽음(책처럼)
 * 
 * 색인 파일
 * - 빠르게 검색할 수 있도록 인덱스를 생성
 * 
 * 직접 파일
 * - 특정 위치에 직접 접근